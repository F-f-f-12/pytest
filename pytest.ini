[pytest]

addopts =
 # 1.打印更详细的测试结果
 -vs
 # 2.使用线程
 # -n 6
 # 3.指定执行特殊标记的用例
 # -m smoke
 # 4.生成可视化报告(pytest框架自带的测试报告，单独html页面)
 #--html=reports/report.html --self-contained-html
 # 5.执行失败后，再重新执行5次，每次上一个执行完成后延时1s
 #--reruns 5 --reruns-delay 1
 # 6.使用allure框架生成测试报告
 # --alluredir=temps --clean-alluredir
 # 7.使用allure框架生成测试报告
 # --alluredir ./report/temps -p no:warnings --clean-alluredir

# 指定测试用例的路径
testpaths = ./testcase/


# 约定测试文件
python_files = test_*.py
python_classes = Test*
python_functions = test


# 用户自定义标记
markers =
 api: 接口测试
 web: UI测试
 ut: 单元测试
 login: 登录相关
 pay: 支付相关
 distributed: 分布式执行
 smoke: 冒烟测试


# 5.生成日志文件
# 日志基础配置（文件名在conftest.py中动态生成）
log_file_level = info
log_file_format = %(levelname)-8s %(asctime)s [%(name)s:%(lineno)s] :%(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# 记录用例执行结果
result_log_enable = 1
# 记录用例分割线
result_log_separator = 1
# 分割线等级
result_log_level_separator = warning
# 异常信息等级
result_log_level_verbose = info


